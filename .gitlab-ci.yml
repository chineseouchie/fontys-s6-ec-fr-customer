stages:
  - build
  - test
  - deploy

deployStagingDocker:
  stage: deploy
  tags:
    - stage
  only:
    - staging
  before_script:
    - docker login -u $CI_REGISTRY_USER -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t "$CI_REGISTRY_IMAGE-staging:$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE-staging:$CI_COMMIT_SHA"
    - docker rmi "$CI_REGISTRY_IMAGE-staging:$CI_COMMIT_SHA"
    - docker image prune -f
  after_script:
    - docker logout

deployStagingK8s:
  stage: deploy
  tags:
    - stage
  only:
    - staging
  script:
    - microk8s kubectl apply -f ./k8s/ec-fr-customer-deploy.yaml
    - microk8s kubectl rollout restart deployment ec-fr-customer
    - docker container prune -f
    - docker image prune -f
  needs: ["deployStagingDocker"]

deployDocker:
  stage: deploy
  tags:
    - prod
  only:
    - production
  before_script:
    - docker login -u $CI_REGISTRY_USER -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA" -t $CI_REGISTRY_IMAGE:latest .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - docker rmi "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  after_script:
    - docker logout

deployK8s:
  stage: deploy
  tags:
    - prod
  only:
    - production
  script:
    - microk8s kubectl apply -f ./k8s/ec-fr-customer-deploy.yaml
    - microk8s kubectl rollout restart deployment ec-fr-customer
    - docker container prune -f
    - docker image prune -f
  needs: ["deployDocker"]
